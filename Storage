#include <fstream>

void savetofile(const string& filename)
{
  ofstream file(filenaem);
  if (!file.is_open())
    {
        cout << "Error opening file for writing.\n";
        return;
    }

    file << "# Nodes\n";
    for (Node* node : nodes)
    {
        file << node->node_name << endl;
    }

    file << "\n# Edges\n";
    for (Node* node : nodes)
    {
        for (size_t i = 0; i < node->neighbors.size(); ++i)
        {
            file << node->node_name << ", " 
                 << node->neighbors[i]->node_name << ", " 
                 << node->weights[i] << endl;
        }
    }

    file << "\n# Aliases\n";
    for (const auto& pair : aliasMap)
    {
        file << pair.first << ", " << pair.second << endl;
    }

    file.close();
    cout << "Graph saved successfully to " << filename << endl;
}
}

void loadFromFile(const string& filename)
{
    ifstream file(filename);
    if (!file.is_open())
    {
        cout << "Error opening file for reading.\n";
        return;
    }

    string line;
    enum Section { NONE, NODES, EDGES, ALIASES };
    Section section = NONE;

    unordered_map<string, string> aliasBuffer;

    while (getline(file, line))
    {
        if (line == "# Nodes")
        {
            section = NODES;
            continue;
        }
        else if (line == "# Edges")
        {
            section = EDGES;
            continue;
        }
        else if (line == "# Aliases")
        {
            section = ALIASES;
            continue;
        }
        else if (line.empty())
        {
            continue;
        }

        switch (section)
        {
            case NODES:
            {
                addNode(line);
                break;
            }
            case EDGES:
            {
                stringstream ss(line);
                string building1, building2, weightStr;
                getline(ss, building1, ',');
                getline(ss, building2, ',');
                getline(ss, weightStr);

                // Trim spaces
                building1.erase(0, building1.find_first_not_of(" "));
                building1.erase(building1.find_last_not_of(" ") + 1);
                building2.erase(0, building2.find_first_not_of(" "));
                building2.erase(building2.find_last_not_of(" ") + 1);

                double weight = stod(weightStr);

                if (nameToNode.find(building1) != nameToNode.end() &&
                    nameToNode.find(building2) != nameToNode.end())
                {
                    addEdge(nameToNode[building1], nameToNode[building2], weight);
                }
                break;
            }
            case ALIASES:
            {
                stringstream ss(line);
                string alias, actualName;
                getline(ss, alias, ',');
                getline(ss, actualName);

                alias.erase(0, alias.find_first_not_of(" "));
                alias.erase(alias.find_last_not_of(" ") + 1);
                actualName.erase(0, actualName.find_first_not_of(" "));
                actualName.erase(actualName.find_last_not_of(" ") + 1);

                addAlias(alias, actualName);
                break;
            }
            default:
                break;
        }
    }

    file.close();
    cout << "Graph loaded successfully from " << filename << endl;
}
